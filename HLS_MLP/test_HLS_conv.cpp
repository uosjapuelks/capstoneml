
#include <stdio.h>
//#include "ap_axi_sdata.h" // ap_axis can also be used, but it will include all sideband signals which we don't need
#include "hls_stream.h"
//#include "ap_int.h"
//#include "params.h"

// Creating a custom structure which includes the data word and TLAST signal.
// ACLK, ARESETN, TREADY, TDATA, TVALID are essential signals for AXIS.
// TLAST is a sideband signal which is optional in AXIS.
// However, it is necessary for us since we connecting M_AXIS to AXI Stream FIFO / AXI DMA.
// So, we create a struct with data (TDATA) and last (TLAST). The rest of the essential AXIS signals are automatically dealt with by the HLS tool.
struct AXIS_wLAST{
	float data;
	bool last;
};

void myconv_HLS(hls::stream<AXIS_wLAST>& S_AXIS, hls::stream<AXIS_wLAST>& M_AXIS);

#define INPUT_LAYER 120
#define TEST_CASES 2
#define OUTPUT 4

//ap_uint<8> sum = 0; // using arbitrary precision

float test_input_memory [TEST_CASES][INPUT_LAYER] = {{0.3176470588235294, 0.36470588235294116, 0.5529411764705883, 0.5882352941176471, 0.45098039215686275, 0.5019607843137255, 0.30980392156862746, 0.3568627450980392, 0.5450980392156862, 0.596078431372549, 0.4392156862745098, 0.49411764705882355, 0.30196078431372547, 0.3607843137254902, 0.5372549019607843, 0.6352941176470588, 0.4235294117647059, 0.49411764705882355, 0.2980392156862745, 0.36470588235294116, 0.5294117647058824, 0.6549019607843137, 0.40784313725490196, 0.49019607843137253, 0.2823529411764706, 0.36470588235294116, 0.5215686274509804, 0.6431372549019608, 0.39215686274509803, 0.4627450980392157, 0.25098039215686274, 0.35294117647058826, 0.5058823529411764, 0.6313725490196078, 0.3843137254901961, 0.43137254901960786, 0.23921568627450981, 0.3411764705882353, 0.4980392156862745, 0.6196078431372549, 0.38823529411764707, 0.403921568627451, 0.28627450980392155, 0.3411764705882353, 0.4980392156862745, 0.6196078431372549, 0.4117647058823529, 0.3686274509803922, 0.30980392156862746, 0.3411764705882353, 0.49019607843137253, 0.6352941176470588, 0.4392156862745098, 0.33725490196078434, 0.2, 0.27058823529411763, 0.39215686274509803, 0.7686274509803922, 0.48627450980392156, 0.27058823529411763, 0.19215686274509805, 0.23137254901960785, 0.3607843137254902, 0.7333333333333333, 0.47843137254901963, 0.23529411764705882, 0.19215686274509805, 0.19215686274509805, 0.3411764705882353, 0.7764705882352941, 0.5294117647058824, 0.1803921568627451, 0.15294117647058825, 0.1843137254901961, 0.3058823529411765, 0.8549019607843137, 0.6, 0.10980392156862745, 0.10980392156862745, 0.1803921568627451, 0.2980392156862745, 0.9137254901960784, 0.611764705882353, 0.047058823529411764, 0.08627450980392157, 0.19215686274509805, 0.3176470588235294, 0.8666666666666667, 0.6352941176470588, 0.03137254901960784, 0.06274509803921569, 0.21568627450980393, 0.32941176470588235, 0.788235294117647, 0.6705882352941176, 0.03137254901960784, 0.03529411764705882, 0.2235294117647059, 0.3254901960784314, 0.6470588235294118, 0.6745098039215687, 0.03137254901960784, 0.03137254901960784, 0.2235294117647059, 0.32941176470588235, 0.5019607843137255, 0.6705882352941176, 0.03137254901960784, 0.043137254901960784, 0.2235294117647059, 0.34509803921568627, 0.4235294117647059, 0.7058823529411765, 0.03137254901960784, 0.08235294117647059, 0.25098039215686274, 0.34901960784313724, 0.3803921568627451, 0.796078431372549, 0.03137254901960784}, 
													{0.5607843137254902, 0.4549019607843137, 0.23921568627450981, 0.8117647058823529, 0.9647058823529412, 0.7529411764705882, 0.2784313725490196, 0.6039215686274509, 0.49019607843137253, 0.9137254901960784, 0.9647058823529412, 0.48627450980392156, 0.2784313725490196, 0.6039215686274509, 0.49019607843137253, 0.9137254901960784, 0.9647058823529412, 0.48627450980392156, 0.08235294117647059, 0.6862745098039216, 0.6666666666666666, 0.9647058823529412, 0.9647058823529412, 0.6745098039215687, 0.08235294117647059, 0.6862745098039216, 0.6666666666666666, 0.9647058823529412, 0.9647058823529412, 0.6745098039215687, 0.45098039215686275, 0.8823529411764706, 0.7333333333333333, 0.6901960784313725, 0.9647058823529412, 0.803921568627451, 0.45098039215686275, 0.8823529411764706, 0.7333333333333333, 0.6901960784313725, 0.9647058823529412, 0.803921568627451, 0.47843137254901963, 0.1803921568627451, 0.8823529411764706, 0.03137254901960784, 0.9647058823529412, 0.36470588235294116, 0.47843137254901963, 0.1803921568627451, 0.8823529411764706, 0.03137254901960784, 0.9647058823529412, 0.36470588235294116, 0.37254901960784315, 0.42745098039215684, 0.7411764705882353, 0.9568627450980393, 0.12549019607843137, 0.7411764705882353, 0.4980392156862745, 0.5764705882352941, 0.7254901960784313, 0.2784313725490196, 0.7372549019607844, 0.34509803921568627, 0.4980392156862745, 0.5764705882352941, 0.7254901960784313, 0.2784313725490196, 0.7372549019607844, 0.34509803921568627, 0.4980392156862745, 0.5411764705882353, 0.6745098039215687, 0.4666666666666667, 0.49411764705882355, 0.48627450980392156, 0.4980392156862745, 0.5411764705882353, 0.6745098039215687, 0.4666666666666667, 0.49411764705882355, 0.48627450980392156, 0.5294117647058824, 0.5803921568627451, 0.6196078431372549, 0.5333333333333333, 0.3843137254901961, 0.5137254901960784, 0.5294117647058824, 0.5803921568627451, 0.6196078431372549, 0.5333333333333333, 0.3843137254901961, 0.5137254901960784, 0.5450980392156862, 0.5843137254901961, 0.6, 0.49019607843137253, 0.396078431372549, 0.5098039215686274, 0.5450980392156862, 0.5843137254901961, 0.6, 0.49019607843137253, 0.396078431372549, 0.5098039215686274, 0.5568627450980392, 0.5411764705882353, 0.5686274509803921, 0.49411764705882355, 0.6039215686274509, 0.5254901960784314, 0.4196078431372549, 0.596078431372549, 0.5254901960784314, 0.7294117647058823, 0.8705882352941177, 0.43529411764705883}};

float test_restult_expected_memory [TEST_CASES][OUTPUT] = {{0.}, {2.}};
//float test_restult_expected_memory [TEST_CASES][OUTPUT] = {{5.63542796, 0., 2.65119, 0.4064574}, {0., 0.91876486, 0., 4.43290832}};
float result_memory [TEST_CASES][OUTPUT];

hls::stream<AXIS_wLAST> S_AXIS;
hls::stream<AXIS_wLAST> M_AXIS;

int main()
{
	int success;
	AXIS_wLAST read_output, write_input;

	for (int test_cnt=0; test_cnt<TEST_CASES; test_cnt++){
		printf(" Transmitting Data for test case %d ... \r\n",test_cnt);

		for(int i=0;i<INPUT_LAYER;i++){
			write_input.data = test_input_memory[test_cnt][i];
			write_input.last=0;
			if (i==INPUT_LAYER-1){
				write_input.last=1;
			}
			S_AXIS.write(write_input);
		}

		myconv_HLS(S_AXIS, M_AXIS);

		printf(" Receiving data for test case %d ... \r\n", test_cnt);

		for(int i=0; i<1; i++){

			read_output = M_AXIS.read();
			result_memory[test_cnt][i]=read_output.data;
		}
	}
	success=1;

	printf(" Comparing data ... \r\n");
	for (int tcnt=0; tcnt< TEST_CASES; tcnt++){
		for(int i=0; i<1;i++){
			printf("Data Received: %f, %f ...\r\n",result_memory[tcnt][i], test_restult_expected_memory[tcnt][i]);
			success = success & (result_memory[tcnt][i] == test_restult_expected_memory[tcnt][i]);
		}
	}

/*
	for (int tcnt=0; tcnt< TEST_CASES; tcnt++){
		for(int i=0; i<OUTPUT;i++){
			printf("Data Received: %f, %f ...\r\n",result_memory[tcnt][i], test_restult_expected_memory[tcnt][i]);
			success = success & (result_memory[tcnt][i] == test_restult_expected_memory[tcnt][i]);
		}
	}
*/
	if (success!=1) {
		printf("Test Failed \r\n");
		return 1;
	}
	printf("Test Success\r\n");

	return 0;
}

